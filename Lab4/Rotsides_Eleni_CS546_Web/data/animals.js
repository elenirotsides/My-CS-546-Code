const mongoCollections = require('../mongoCollections');
const { ObjectId } = require('mongodb');
const animals = mongoCollections.animals;

async function get(id) {
    // error handling
    if (!id) throw 'Please provide an ID';
    if (arguments.length !== 1) throw 'Please provide only 1 id';

    const animalCollection = await animals(); // await collection

    if (typeof id === 'string') {
        const animal1 = await animalCollection.findOne({ _id: ObjectId(id) });
        if (animal1 === null) throw 'Sorry, no animal with that ID';
        return animal1;
    } else {
        const animal = await animalCollection.findOne({ _id: id }); // getting the entry with the id provided
        if (animal === null) throw 'Sorry, no animal with that ID';
        return animal;
    }
}

async function getAll() {
    const animalCollection = await animals(); // await collection

    const animalList = await animalCollection.find({}).toArray();
    // finding all in animal collectiion, and then converting info to an array

    return animalList;
}

async function create(name, animalType) {
    // error handling
    if (!name) throw 'You must provide a name for your animal';
    if (!animalType) throw 'You must provide an animalType';
    if (name === ' ') throw 'Name cannot be an empty string';
    if (animalType === ' ') throw 'animalType cannot be an empty string';
    if (typeof name !== 'string') throw 'Name must be a string';
    if (typeof animalType !== 'string') throw 'animalType must be a string';
    if (arguments.length !== 2) throw 'Incorrect number of arguments have been provided';

    const animalCollection = await animals(); // await collection

    let newAnimal = {
        name: name,
        animalType: animalType,
    }; // new animal object

    const insertInfo = await animalCollection.insertOne(newAnimal); // insert new animal object into collection
    if (insertInfo.insertedCount === 0) throw 'Could not add animal'; // error just in case it doesn't process it successfully

    const newId = insertInfo.insertedId; // stores ID generated by mongo into this variable

    return await this.get(newId);
}

async function remove(id) {
    // error handling
    if (!id) throw 'Please provide an ID';
    if (arguments.length !== 1) throw 'Please provide only 1 id';

    const animalCollection = await animals(); // await collection
    const printDeletedAnimal = await this.get(id);
    //console.log(printDeletedAnimal);
    const deletionInfo = await animalCollection.deleteOne({ _id: id });
    // removes animal with the id provided and stores it in this variable

    if (deletionInfo.deletedCount === 0) throw `Could not delete post with an id of ${id}`;
    // if it couldn't delete, throw this error letting the user know

    return printDeletedAnimal;
}
async function rename(id, newName) {
    //error handling
    if (!id) throw 'Please provide an ID';
    if (!newName) throw 'Please provide a new name';
    if (newName === ' ') throw 'Name cannot be an empty string';
    if (typeof newName !== 'string') throw 'New name must be a string';
    if (arguments.length !== 2) throw 'Incorrect number of arguments have been provided';

    const animalCollection = await animals(); // await collection

    let renameAnimal = {
        // object to rename animal
        name: newName,
    };
    // updating animal's name in collection with the id given
    const updatedInfo = await animalCollection.updateOne({ _id: id }, { $set: renameAnimal });
    if (updatedInfo.modifiedCount === 0) throw 'Could not successfully rename animal';
    // if it can't update for some reason, throw an error so the user is aware

    return await this.get(id);
}

module.exports = { create, getAll, get, remove, rename };
